generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

/// @seed="node prisma/seed.js"

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model access_secret {
  Id    Int     @id @default(autoincrement())
  value String? @db.VarChar(255)
}

model live_stream_favourites {
  Id               Int              @id @default(autoincrement())
  emp_Id           Int?
  park_camera_Id   Int?
  office_camera_Id Int?
  createdAt        DateTime?        @db.Timestamp(0)
  updatedAt        DateTime         @default(now()) @db.Timestamp(0)
  users            users?           @relation(fields: [emp_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "live_stream_favourites_ibfk_1")
  park_cameras     park_cameras?    @relation(fields: [park_camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "live_stream_favourites_ibfk_2")
  offices_cameras  offices_cameras? @relation(fields: [office_camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "live_stream_favourites_ibfk_3")

  @@index([emp_Id], map: "emp_Id")
  @@index([office_camera_Id], map: "office_camera_Id")
  @@index([park_camera_Id], map: "park_camera_Id")
}

model office_streams {
  Id             Int       @id @default(autoincrement())
  office_Id      Int?
  stream_url     String?   @db.VarChar(255)
  stream_api_key String?   @db.VarChar(255)
  stream_path    String?   @db.VarChar(255)
  password       String?   @db.VarChar(255)
  createdAt      DateTime? @db.Timestamp(0)
  updatedAt      DateTime  @default(now()) @db.Timestamp(0)
  offices        offices?  @relation(fields: [office_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "office_streams_ibfk_1")

  @@index([office_Id], map: "office_Id")
}

model offices {
  Id                         Int                          @id @default(autoincrement())
  office_Id                  String?                      @unique(map: "office_Id") @db.VarChar(255)
  office_english_name        String?                      @db.VarChar(255)
  office_arabic_name         String?                      @db.VarChar(255)
  image                      String?                      @db.VarChar(255)
  latitude                   Decimal?                     @db.Decimal(10, 8)
  longitude                  Decimal?                     @db.Decimal(11, 8)
  createdAt                  DateTime?                    @db.Timestamp(0)
  updatedAt                  DateTime                     @default(now()) @db.Timestamp(0)
  office_streams             office_streams[]
  offices_attendance         offices_attendance[]         @relation("offices_attendance_to_office")
  offices_cameras            offices_cameras[]
  offices_sentiment_analysis offices_sentiment_analysis[]
  offices_footfall_analysis  offices_footfall_analysis[]
  location                   String?                      @db.VarChar(255)
  status                     String?                      @db.VarChar(255)

  @@map("offices")
}

model offices_attendance {
  Id        Int  @id @default(autoincrement())
  office_Id Int?
  person_Id Int? // now references users.Id

  entry_time DateTime? @db.Timestamp(0)
  exit_time  DateTime? @db.Timestamp(0)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  office offices? @relation("offices_attendance_to_office", fields: [office_Id], references: [Id], map: "offices_attendance_ibfk_1")
  user   users?   @relation("offices_attendance_to_user", fields: [person_Id], references: [Id], map: "offices_attendance_ibfk_2")

  @@index([office_Id], map: "office_Id")
  @@index([person_Id], map: "person_Id")
  @@map("offices_attendance")
}

model offices_cameras {
  Id                                                                                     Int                          @id @default(autoincrement())
  office_Id                                                                              Int?
  camera_Id                                                                              String?                      @db.VarChar(255)
  camera_english_name                                                                    String?                      @db.VarChar(255)
  camera_arabic_name                                                                     String?                      @db.VarChar(255)
  latitude                                                                               Decimal?                     @db.Decimal(10, 8)
  longitude                                                                              Decimal?                     @db.Decimal(11, 8)
  ip_address                                                                             String?                      @db.VarChar(45)
  last_active_date                                                                       DateTime?                    @db.Date
  last_active_time                                                                       DateTime?                    @db.Time(0)
  status                                                                                 String?                      @db.VarChar(50)
  createdAt                                                                              DateTime?                    @db.Timestamp(0)
  updatedAt                                                                              DateTime                     @default(now()) @db.Timestamp(0)
  live_stream_favourites                                                                 live_stream_favourites[]
  offices                                                                                offices?                     @relation(fields: [office_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "offices_cameras_ibfk_1")
  offices_sentiment_analysis_offices_sentiment_analysis_entry_camera_IdTooffices_cameras offices_sentiment_analysis[] @relation("offices_sentiment_analysis_entry_camera_IdTooffices_cameras")
  offices_sentiment_analysis_offices_sentiment_analysis_exit_camera_IdTooffices_cameras  offices_sentiment_analysis[] @relation("offices_sentiment_analysis_exit_camera_IdTooffices_cameras")
  location                                                                               String?                      @db.VarChar(255)
  // ðŸ”¹ New Boolean fields
  attendance                                                                             Boolean                      @default(false)
  footfall                                                                               Boolean                      @default(false)
  sentiment                                                                              Boolean                      @default(false)

  // âœ… composite unique constraint
  @@unique([office_Id, camera_Id])
  @@index([office_Id], map: "office_Id")
  @@map("offices_cameras")
}

model offices_sentiment_analysis {
  Id        Int     @id @default(autoincrement())
  office_Id Int?
  person_Id String? @db.VarChar(255)

  detection_Id   String? @db.VarChar(100)
  person_name    String? @db.VarChar(255)
  person_image   String? @db.VarChar(255)
  gender         String? @db.VarChar(50)
  check_in_image String? @db.VarChar(255)

  sentiment_of       offices_sentiment_analysis_sentiment_of?
  check_in_date      DateTime?                                @db.Date
  check_in_time      DateTime?                                @db.Time(0)
  check_in_sentiment String?                                  @db.VarChar(50)
  entry_camera_Id    Int?
  check_out_date     DateTime?                                @db.Date
  check_out_time     DateTime?                                @db.Time(0)
  check_out_capture  String?                                  @db.VarChar(255)

  check_out_sentiment String? @db.VarChar(50)

  exit_camera_Id Int?
  createdAt      DateTime? @db.Timestamp(0)
  updatedAt      DateTime  @default(now()) @db.Timestamp(0)

  offices                                                                     offices?         @relation(fields: [office_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "offices_sentiment_analysis_ibfk_1")
  offices_cameras_offices_sentiment_analysis_entry_camera_IdTooffices_cameras offices_cameras? @relation("offices_sentiment_analysis_entry_camera_IdTooffices_cameras", fields: [entry_camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "offices_sentiment_analysis_ibfk_2")
  offices_cameras_offices_sentiment_analysis_exit_camera_IdTooffices_cameras  offices_cameras? @relation("offices_sentiment_analysis_exit_camera_IdTooffices_cameras", fields: [exit_camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "offices_sentiment_analysis_ibfk_3")

  @@index([entry_camera_Id], map: "entry_camera_Id")
  @@index([exit_camera_Id], map: "exit_camera_Id")
  @@index([office_Id], map: "office_Id")
  @@map("offices_sentiment_analysis")
}

model park_cameras {
  Id                                                                              Int                         @id @default(autoincrement())
  park_Id                                                                         Int?
  camera_Id                                                                       String?                     @db.VarChar(255)
  camera_english_name                                                             String?                     @db.VarChar(255)
  camera_arabic_name                                                              String?                     @db.VarChar(255)
  latitude                                                                        Decimal?                    @db.Decimal(10, 8)
  longitude                                                                       Decimal?                    @db.Decimal(11, 8)
  ip_address                                                                      String?                     @db.VarChar(45)
  last_active_date                                                                DateTime?                   @db.Date
  last_active_time                                                                DateTime?                   @db.Time(0)
  status                                                                          String?                     @db.VarChar(50)
  createdAt                                                                       DateTime?                   @db.Timestamp(0)
  updatedAt                                                                       DateTime                    @default(now()) @db.Timestamp(0)
  live_stream_favourites                                                          live_stream_favourites[]
  parks                                                                           parks?                      @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "park_cameras_ibfk_1")
  parks_behaviour_alerts                                                          parks_behaviour_alerts[]
  parks_intrusion_detection                                                       parks_intrusion_detection[]
  parks_sentiment_analysis_parks_sentiment_analysis_entry_camera_IdTopark_cameras parks_sentiment_analysis[]  @relation("parks_sentiment_analysis_entry_camera_IdTopark_cameras")
  parks_sentiment_analysis_parks_sentiment_analysis_exit_camera_IdTopark_cameras  parks_sentiment_analysis[]  @relation("parks_sentiment_analysis_exit_camera_IdTopark_cameras")
  parks_smoking_detection                                                         parks_smoking_detection[]
  parks_landscaping                                                               parks_landscaping[]         @relation("parks_landscaping_to_park_cameras")
  parks_litter_detection                                                          parks_litter_detection[]    @relation("parks_litter_detection_to_park_cameras")
  location                                                                        String?                     @db.VarChar(255)
  // âœ… Functionalities (all 9 as Boolean flags)
  attendance                                                                      Boolean?                    @default(false)
  footfall                                                                        Boolean?                    @default(false)
  sentiment                                                                       Boolean?                    @default(false)
  behaviour                                                                       Boolean?                    @default(false)
  irrigation                                                                      Boolean?                    @default(false)
  landscaping                                                                     Boolean?                    @default(false)
  litter_detection                                                                Boolean?                    @default(false)
  smoking_detection                                                               Boolean?                    @default(false)
  intrusion                                                                       Boolean?                    @default(false)
  // âœ… Streaming-related columns
  stream_url                                                                      String?                     @db.VarChar(255)
  stream_api_key                                                                  String?                     @db.VarChar(255)
  stream_path                                                                     String?                     @db.VarChar(255)
  password                                                                        String?                     @db.VarChar(255)

  @@unique([park_Id, camera_Id])
  @@index([park_Id], map: "park_Id")
  @@map("park_cameras")
}

model park_streams {
  Id             Int       @id @default(autoincrement())
  park_Id        Int?
  stream_url     String?   @db.VarChar(255)
  stream_api_key String?   @db.VarChar(255)
  stream_path    String?   @db.VarChar(255)
  password       String?   @db.VarChar(255)
  createdAt      DateTime? @db.Timestamp(0)
  updatedAt      DateTime  @default(now()) @db.Timestamp(0)
  parks          parks?    @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "park_streams_ibfk_1")

  @@index([park_Id], map: "park_Id")
  @@map("park_streams")
}

model TermsPrivacy {
  id            Int      @id @default(autoincrement())
  terms         String?  @db.Text
  privacyPolicy String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String   @db.Text
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model park_zones {
  Id                           Int                            @id @default(autoincrement())
  park_Id                      Int?
  zone_Id                      String?                        @db.VarChar(255)
  zone_english_name            String?                        @db.VarChar(255)
  zone_arabic_name             String?                        @db.VarChar(255)
  latitude                     Decimal?                       @db.Decimal(10, 8)
  longitude                    Decimal?                       @db.Decimal(11, 8)
  device_ip                    String?                        @db.VarChar(45)
  web_api                      String?                        @db.VarChar(255)
  status                       String?                        @db.VarChar(50)
  createdAt                    DateTime?                      @db.Timestamp(0)
  updatedAt                    DateTime                       @default(now()) @db.Timestamp(0)
  parks                        parks?                         @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "park_zones_ibfk_1")
  parks_irrigation_job_history parks_irrigation_job_history[]
  location                     String?                        @db.VarChar(255)

  // âœ… composite unique constraint
  @@unique([park_Id, zone_Id])
  @@index([park_Id], map: "park_Id")
  @@map("park_zones")
}

model parks {
  Id                           Int                            @id @default(autoincrement())
  park_Id                      String?                        @unique(map: "park_Id") @db.VarChar(255)
  park_english_name            String?                        @db.VarChar(255)
  park_arabic_name             String?                        @db.VarChar(255)
  image                        String?                        @db.VarChar(255)
  latitude                     Decimal?                       @db.Decimal(10, 8)
  longitude                    Decimal?                       @db.Decimal(11, 8)
  createdAt                    DateTime?                      @db.Timestamp(0)
  updatedAt                    DateTime                       @default(now()) @db.Timestamp(0)
  park_cameras                 park_cameras[]
  park_streams                 park_streams[]
  park_zones                   park_zones[]
  parks_attendance             parks_attendance[]             @relation("parks_attendance_to_park")
  parks_behaviour_alerts       parks_behaviour_alerts[]
  parks_intrusion_detection    parks_intrusion_detection[]
  parks_irrigation_job_history parks_irrigation_job_history[]
  parks_landscaping            parks_landscaping[]
  parks_litter_detection       parks_litter_detection[]
  parks_sentiment_analysis     parks_sentiment_analysis[]
  parks_smoking_detection      parks_smoking_detection[]
  parks_footfall_analysis      parks_footfall_analysis[]
  location                     String?                        @db.VarChar(255)

  @@map("parks")
}

model parks_attendance {
  Id         Int       @id @default(autoincrement())
  park_Id    Int?
  person_Id  Int?
  entry_time DateTime? @db.Timestamp(0)
  exit_time  DateTime? @db.Timestamp(0)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  park parks? @relation("parks_attendance_to_park", fields: [park_Id], references: [Id], map: "parks_attendance_ibfk_1")
  user users? @relation("parks_attendance_to_user", fields: [person_Id], references: [Id], map: "parks_attendance_ibfk_2")

  @@index([park_Id], map: "park_Id")
  @@index([person_Id], map: "person_Id")
  @@map("parks_attendance")
}

model parks_behaviour_alerts {
  Id                 Int           @id @default(autoincrement())
  park_Id            Int?
  person_Id          String?       @db.VarChar(255)
  camera_Id          Int?
  detection_Id       String?       @db.VarChar(255)
  detection_code     String?       @db.VarChar(255)
  detection_date     DateTime?     @default(now()) @db.Timestamp(0)
  detection_time     DateTime?     @db.Time(0)
  description        String?       @db.VarChar(255)
  detected_behaviour String?       @db.VarChar(255)
  is_employee        Boolean?      @default(false)
  snap_shot          String?       @db.VarChar(255)
  createdAt          DateTime?     @db.Timestamp(0)
  updatedAt          DateTime      @default(now()) @db.Timestamp(0)
  parks              parks?        @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_behaviour_alerts_ibfk_1")
  park_cameras       park_cameras? @relation(fields: [camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_behaviour_alerts_ibfk_2")

  @@index([camera_Id], map: "camera_Id")
  @@index([park_Id], map: "park_Id")
  @@map("parks_behaviour_alerts")
}

model parks_intrusion_detection {
  Id                      Int       @id @default(autoincrement())
  park_Id                 Int?
  location                String?   @db.VarChar(255)
  camera_Id               Int?
  occurrence_date         DateTime? @db.Date
  occurrence_time         DateTime? @db.Time(0)
  snap_shot               String?   @db.VarChar(255)
  posted_to_intranet_date DateTime? @db.Date
  posted_to_intranet_time DateTime? @db.Time(0)

  detection_Id   String?   @db.VarChar(100)
  detection_date DateTime? @db.Timestamp(0)
  detection_time DateTime? @db.Time(0)
  description    String?   @db.Text
  is_employee    Boolean?  @default(false)
  current_status String?   @db.VarChar(100)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  parks        parks?        @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_intrusion_detection_ibfk_1")
  park_cameras park_cameras? @relation(fields: [camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_intrusion_detection_ibfk_2")

  intranet_posting_history intranet_posting_history[]

  @@index([camera_Id], map: "camera_Id")
  @@index([park_Id], map: "park_Id")
  @@map("parks_intrusion_detection")
}

model parks_irrigation_job_history {
  Id               Int         @id @default(autoincrement())
  park_Id          Int?
  zone_Id          Int?
  job_Id           String?     @db.VarChar(255)
  job_started_at   DateTime    @default(now()) @db.Timestamp(0)
  job_completed_at DateTime?   @db.DateTime(0)
  job_status       String?     @db.VarChar(50)
  createdAt        DateTime?   @db.Timestamp(0)
  updatedAt        DateTime    @default(now()) @db.Timestamp(0)
  parks            parks?      @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_irrigation_job_history_ibfk_1")
  park_zones       park_zones? @relation(fields: [zone_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_irrigation_job_history_ibfk_2")

  @@index([park_Id], map: "park_Id")
  @@index([zone_Id], map: "zone_Id")
  @@map("parks_irrigation_job_history")
}

model parks_landscaping {
  Id        Int     @id @default(autoincrement())
  park_Id   Int?
  case_Id   String? @db.VarChar(255)
  location  String? @db.VarChar(255)
  snap_shot String? @db.VarChar(255)
  type      String? @db.VarChar(100)
  status    String? @db.VarChar(50)

  detection_Id   String?   @db.VarChar(100)
  detection_date DateTime? @db.Timestamp(0)
  detection_time DateTime? @db.Time(0)
  description    String?   @db.Text
  current_status String?   @db.VarChar(100)
  camera_Id      Int?
  after_image    String?   @db.VarChar(255)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  parks        parks?        @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_landscaping_ibfk_1")
  park_cameras park_cameras? @relation("parks_landscaping_to_park_cameras", fields: [camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_landscaping_ibfk_2")

  ticket_details ticket_details_table[]

  @@index([park_Id], map: "park_Id")
  @@index([camera_Id], map: "camera_Id")
  @@map("parks_landscaping")
}

model parks_litter_detection {
  Id              Int       @id @default(autoincrement())
  park_Id         Int?
  case_Id         String?   @db.VarChar(255)
  location        String?   @db.VarChar(255)
  occurrence_date DateTime? @db.Date
  occurrence_time DateTime? @db.Time(0)
  snap_shot       String?   @db.VarChar(255)
  status          String?   @db.VarChar(50)

  detection_Id   String?   @db.VarChar(100)
  detection_date DateTime? @db.Timestamp(0)
  detection_time DateTime? @db.Time(0)
  description    String?   @db.Text
  current_status String?   @db.VarChar(100)
  camera_Id      Int?
  after_image    String?   @db.VarChar(255)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  parks        parks?        @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_litter_detection_ibfk_1")
  park_cameras park_cameras? @relation("parks_litter_detection_to_park_cameras", fields: [camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_litter_detection_ibfk_2")

  ticket_details ticket_details_table[]

  @@index([park_Id], map: "park_Id")
  @@index([camera_Id], map: "camera_Id")
  @@map("parks_litter_detection")
}

model ticket_details_table {
  id Int @id @default(autoincrement())

  status   String?   @db.VarChar(50) // initiated/assigned/completed/verified/failed_verification
  date     DateTime? @db.Date
  time     DateTime? @db.Time(0)
  comments String?   @db.Text
  image    String?   @db.VarChar(255)
  abc1     String?   @db.VarChar(100)
  abc2     String?   @db.VarChar(100)
  abc3     String?   @db.VarChar(100)
  abc4     String?   @db.VarChar(100)

  litterDetectionId Int?
  landscapingId     Int?

  parks_litter_detection parks_litter_detection? @relation(fields: [litterDetectionId], references: [Id], onDelete: Cascade)
  parks_landscaping      parks_landscaping?      @relation(fields: [landscapingId], references: [Id], onDelete: Cascade)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  @@index([litterDetectionId], map: "litterDetectionId_idx")
  @@index([landscapingId], map: "landscapingId_idx")
  @@map("ticket_details_table")
}

model parks_sentiment_analysis {
  Id        Int     @id @default(autoincrement())
  park_Id   Int?
  person_Id String? @db.VarChar(255)

  detection_Id   String? @db.VarChar(100)
  person_name    String? @db.VarChar(255)
  person_image   String? @db.VarChar(255)
  gender         String? @db.VarChar(50)
  check_in_image String? @db.VarChar(255)

  sentiment_of       parks_sentiment_analysis_sentiment_of?
  check_in_date      DateTime?                              @db.Date
  check_in_time      DateTime?                              @db.Time(0)
  check_in_sentiment String?                                @db.VarChar(50)
  entry_camera_Id    Int?
  check_out_date     DateTime?                              @db.Date
  check_out_time     DateTime?                              @db.Time(0)
  check_out_capture  String?                                @db.VarChar(255)

  check_out_sentiment String? @db.VarChar(50)

  exit_camera_Id Int?
  createdAt      DateTime? @db.Timestamp(0)
  updatedAt      DateTime  @default(now()) @db.Timestamp(0)

  parks                                                               parks?        @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_sentiment_analysis_ibfk_1")
  park_cameras_parks_sentiment_analysis_entry_camera_IdTopark_cameras park_cameras? @relation("parks_sentiment_analysis_entry_camera_IdTopark_cameras", fields: [entry_camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_sentiment_analysis_ibfk_2")
  park_cameras_parks_sentiment_analysis_exit_camera_IdTopark_cameras  park_cameras? @relation("parks_sentiment_analysis_exit_camera_IdTopark_cameras", fields: [exit_camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_sentiment_analysis_ibfk_3")

  @@index([entry_camera_Id], map: "entry_camera_Id")
  @@index([exit_camera_Id], map: "exit_camera_Id")
  @@index([park_Id], map: "park_Id")
  @@map("parks_sentiment_analysis")
}

model parks_smoking_detection {
  Id                      Int       @id @default(autoincrement())
  park_Id                 Int?
  location                String?   @db.VarChar(255)
  camera_Id               Int?
  occurrence_date         DateTime? @db.Date
  occurrence_time         DateTime? @db.Time(0)
  snap_shot               String?   @db.VarChar(255)
  posted_to_intranet_date DateTime? @db.Date
  posted_to_intranet_time DateTime? @db.Time(0)

  detection_Id   String?   @db.VarChar(100)
  detection_date DateTime? @db.Timestamp(0)
  detection_time DateTime? @db.Time(0)
  description    String?   @db.Text
  is_employee    Boolean?  @default(false)
  current_status String?   @db.VarChar(100)

  createdAt DateTime? @db.Timestamp(0)
  updatedAt DateTime  @default(now()) @db.Timestamp(0)

  parks        parks?        @relation(fields: [park_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_smoking_detection_ibfk_1")
  park_cameras park_cameras? @relation(fields: [camera_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "parks_smoking_detection_ibfk_2")

  intranet_posting_history intranet_posting_history[]

  @@index([camera_Id], map: "camera_Id")
  @@index([park_Id], map: "park_Id")
  @@map("parks_smoking_detection")
}

model intranet_posting_history {
  id                   Int  @id @default(autoincrement())
  smokingDetectionId   Int?
  intrusionDetectionId Int?

  title       String?   @db.VarChar(255)
  intranet_id String?   @db.VarChar(100)
  comments    String?   @db.Text
  date        DateTime? @db.Date
  time        DateTime? @db.Time(0)
  abc1        String?   @db.VarChar(100)
  abc2        String?   @db.VarChar(100)
  abc3        String?   @db.VarChar(100)

  smokingDetection   parks_smoking_detection?   @relation(fields: [smokingDetectionId], references: [Id], onDelete: Cascade)
  intrusionDetection parks_intrusion_detection? @relation(fields: [intrusionDetectionId], references: [Id], onDelete: Cascade)

  @@index([smokingDetectionId], map: "smokingDetectionId_idx")
  @@index([intrusionDetectionId], map: "intrusionDetectionId_idx")
  @@map("intranet_posting_history")
}

model users {
  Id                        Int                         @id @default(autoincrement())
  emp_Id                    String?                     @db.VarChar(255)
  gender                    String?                     @db.VarChar(50)
  emp__eng_name             String?                     @db.VarChar(255)
  emp__arabic_name          String?                     @db.VarChar(255)
  country_code              String?                     @db.VarChar(10)
  phone                     String?                     @db.VarChar(20)
  email                     String?                     @db.VarChar(255)
  dep_eng_name              String?                     @db.VarChar(255)
  dep_arabic_name           String?                     @db.VarChar(255)
  desig_eng_name            String?                     @db.VarChar(255)
  desig_arabic_name         String?                     @db.VarChar(255)
  unit_eng_name             String?                     @db.VarChar(255)
  unit_arabic_name          String?                     @db.VarChar(255)
  committe_eng_name         String?                     @db.VarChar(255)
  committe_arabic_name      String?                     @db.VarChar(255)
  ai_engine_access          Boolean?                    @default(false)
  last_login                DateTime?                   @db.Timestamp(0)
  createdAt                 DateTime?                   @db.Timestamp(0)
  updatedAt                 DateTime                    @default(now()) @db.Timestamp(0)
  role_Id                   Int?
  live_stream_favourites    live_stream_favourites[]
  parks_attendance          parks_attendance[]          @relation("parks_attendance_to_user")
  offices_attendance        offices_attendance[]        @relation("offices_attendance_to_user")
  offices_footfall_analysis offices_footfall_analysis[]

  users_roles users_roles? @relation(fields: [role_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")

  @@index([role_Id], map: "role_Id")
  @@map("users")
}

model users_permissions {
  Id                              Int          @id @default(autoincrement())
  role_Id                         Int?
  dashboard_view                  Boolean?     @default(false)
  role_permission_view            Boolean?     @default(false)
  role_permission_add             Boolean?     @default(false)
  role_permission_update          Boolean?     @default(false)
  offices_view                    Boolean?     @default(false)
  offices_add                     Boolean?     @default(false)
  offices_update                  Boolean?     @default(false)
  parks_view                      Boolean?     @default(false)
  parks_add                       Boolean?     @default(false)
  parks_update                    Boolean?     @default(false)
  system_report_view              Boolean?     @default(false)
  alerts_view                     Boolean?     @default(false)
  office_attendance_view          Boolean?     @default(false)
  office_attendance_add           Boolean?     @default(false)
  office_attendance_update        Boolean?     @default(false)
  office_footfall_view            Boolean?     @default(false)
  office_footfall_add             Boolean?     @default(false)
  office_footfall_update          Boolean?     @default(false)
  office_sentimental_view         Boolean?     @default(false)
  office_sentimental_add          Boolean?     @default(false)
  office_sentimental_update       Boolean?     @default(false)
  park_attendance_view            Boolean?     @default(false)
  park_attendance_add             Boolean?     @default(false)
  park_attendance_update          Boolean?     @default(false)
  park_footfall_view              Boolean?     @default(false)
  park_footfall_add               Boolean?     @default(false)
  park_footfall_update            Boolean?     @default(false)
  park_sentimental_view           Boolean?     @default(false)
  park_sentimental_add            Boolean?     @default(false)
  park_sentimental_update         Boolean?     @default(false)
  park_irrigation_view            Boolean?     @default(false)
  park_irrigation_add             Boolean?     @default(false)
  park_irrigation_update          Boolean?     @default(false)
  park_landscaping_view           Boolean?     @default(false)
  park_landscaping_add            Boolean?     @default(false)
  park_landscaping_update         Boolean?     @default(false)
  park_litter_detection_view      Boolean?     @default(false)
  park_litter_detection_add       Boolean?     @default(false)
  park_litter_detection_update    Boolean?     @default(false)
  park_intrusion_detection_view   Boolean?     @default(false)
  park_intrusion_detection_add    Boolean?     @default(false)
  park_intrusion_detection_update Boolean?     @default(false)
  park_smoking_detection_view     Boolean?     @default(false)
  park_smoking_detection_add      Boolean?     @default(false)
  park_smoking_detection_update   Boolean?     @default(false)
  my_account_view                 Boolean?     @default(false)
  settings_view                   Boolean?     @default(false)
  createdAt                       DateTime?    @db.Timestamp(0)
  updatedAt                       DateTime     @default(now()) @db.Timestamp(0)
  users_roles                     users_roles? @relation(fields: [role_Id], references: [Id], onDelete: Restrict, onUpdate: Restrict, map: "users_permissions_ibfk_1")

  @@index([role_Id], map: "role_Id")
  @@map("users_permissions")
}

model users_roles {
  Id                Int                 @id @default(autoincrement())
  role_name         String?             @db.VarChar(255)
  createdAt         DateTime?           @db.Timestamp(0)
  updatedAt         DateTime            @default(now()) @db.Timestamp(0)
  users             users[]
  users_permissions users_permissions[]

  @@map("users_roles")
}

model parks_footfall_analysis {
  id                   Int      @id @default(autoincrement())
  park_Id              Int
  detection_Id         String
  person_Id            Int
  gender               String?
  is_child             Boolean  @default(false)
  time                 DateTime @default(now())
  detected_camera_Id   String
  detected_camera_name String?
  abc1                 String?
  abc2                 String?
  abc3                 String?

  park parks @relation(fields: [park_Id], references: [Id])

  @@map("parks_footfall_analysis")
}

model offices_footfall_analysis {
  id                   Int      @id @default(autoincrement())
  office_Id            Int
  detection_Id         String
  person_Id            Int
  gender               String?
  is_child             Boolean  @default(false)
  time                 DateTime @default(now())
  detected_camera_Id   String
  detected_camera_name String?
  abc1                 String?
  abc2                 String?
  abc3                 String?

  office offices @relation(fields: [office_Id], references: [Id])
  person users   @relation(fields: [person_Id], references: [Id])

  @@map("offices_footfall_analysis")
}

enum offices_attendance_attendance_of {
  employee
  visitor
}

enum offices_sentiment_analysis_sentiment_of {
  employee
  visitor
}

enum parks_attendance_attendance_of {
  employee
  visitor
}

enum parks_sentiment_analysis_sentiment_of {
  employee
  visitor
}
